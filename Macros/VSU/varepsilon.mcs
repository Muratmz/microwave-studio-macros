' VarEpsilon
' *** Be careful with the line above as CST uses it as a macro name.
'
' This script fills part of computational space with material varying its
' epsilon (electric permittivity). It has quite a lot of parameters and it may
' be not very obvious how to use it.
'
' The part of space to be filled with material is bounded by the rectilinear
' cuboid (in local coordinate system):
'
'     0 <= x <= Lx,
'     0 <= y <= Ly,
'     0 <= z <= Lz.
'
' This space gets discretized with spatial steps dx, dy and dz, producing
' a number of small cells. Each cell is assigned to material separately. The
' exact distribution of epsilon cannot be passed as a parameter. Instead,
' script reads file with name 'varepsilon_data.txt', located in the CST project
' directory. Each line of file is expected to contain four space-separated
' fields:
'
'     <X> <Y> <Z> <EPSILON>
'
' which describe discrete mapping from coordinates to permittivity. The file
' *must* contain an excessive number of lines because each cell is filled by
' material which epsilon equal to the average of epsilons of all points which
' are located within that cell. Points read from file are additionally shifted
' by x0, y0, z0 offsets.
'
' Material permittivity is also quantized, the number of levels can be
' specified by Nepsilon parameter.
'
' At the final part of processing, all cells are intersected with a solid
' object named 'varepsilon:cutoff', to shape the whole object. It must exist
' before this script is called.
'
' Final note, due to CST's stupid bug, don't forget to save your project file
' before you execute the script, standalone or as part of history. Just
' press Ctrl+S before macro execution and right after you have opened your
' project file.
'
' Copyright (c) 2015, Pavel Kretov.
' Provided under the terms of MIT license. This script was created as a part
' of PhD research in Voronezh State University, Russia.
'
Option Explicit
Sub Main()
    BeginHide
    StoreDoubleParameter "varepsilon_Nepsilon", 100
    StoreDoubleParameter "varepsilon_dx",       1
    StoreDoubleParameter "varepsilon_dy",       1
    StoreDoubleParameter "varepsilon_dz",       1
    StoreDoubleParameter "varepsilon_Lx",       10
    StoreDoubleParameter "varepsilon_Ly",       10
    StoreDoubleParameter "varepsilon_Lz",       10
    StoreDoubleParameter "varepsilon_x0",       0
    StoreDoubleParameter "varepsilon_y0",       0
    StoreDoubleParameter "varepsilon_z0",       0
    EndHide

    Dim Nepsilon As Double
    Nepsilon = RestoreDoubleParameter("varepsilon_Nepsilon")

    Dim dx, dy, dz As Double
    Dim Lx, Ly, Lz As Double
    Dim x0, y0, z0 As Double
    dx = RestoreDoubleParameter("varepsilon_dx")
    dy = RestoreDoubleParameter("varepsilon_dy")
    dz = RestoreDoubleParameter("varepsilon_dz")
    Lx = RestoreDoubleParameter("varepsilon_Lx")
    Ly = RestoreDoubleParameter("varepsilon_Ly")
    Lz = RestoreDoubleParameter("varepsilon_Lz")
    x0 = RestoreDoubleParameter("varepsilon_x0")
    y0 = RestoreDoubleParameter("varepsilon_y0")
    z0 = RestoreDoubleParameter("varepsilon_z0")

    Dim Nx, Ny, Nz As Integer
    Nx = Int(Lx / dx)
    Ny = Int(Ly / dy)
    Nz = Int(Lz / dz)

    ' Split the whole cuboid into Nx*Ny*Nz cells and count the number of points
    ' withing each cell, as well as the sum of their epsilons. Also determine
    ' minimum and maximum epsilon in the files.
    ReDim epsilonSums(Nx, Ny, Nz)  As Double
    ReDim pointCounts(Nx, Ny, Nz)  As Double
    Dim minimumEpsilon             As Double
    Dim maximumEpsilon             As Double

    ' FIXME: That's not the right way to deal with things in general, but we
    ' know that epsilon is always positive and cannot be that much.
    minimumEpsilon = 1E6
    maximumEpsilon = 0

    Dim sLine          As String
    Dim sArr
    Dim sArr3(4)       As Double
    Dim i, j           As Integer
    Dim ix, iy, iz     As Integer
    Dim xc, yc, zc, ec As Double

    Dim baseName As String
    baseName = GetProjectPath("Project")

    ' FIXME: File may remain open in case of error.
    On Error GoTo ExitLabel
    Open baseName & "_varepsilon.txt" For Input As #1

    While Not EOF(1)
        Line Input #1, sLine
        sArr = Split(sLine)

        ' Copy all non-empty items from sArr to sArr3, and don't forget that
        ' stupid VBA's indexes can start with 1.
        j = 1
        For i = LBound(sArr) To UBound(sArr)
            Dim s As String
            s = sArr(i)
            If s <> "" Then
                sArr3(j) = Val(s)
                j = j + 1
            End If
        Next

        ' We cannot silently ignore situation when input line contains wrong
        ' number of fields. It may lead to subtle errors in the generated
        ' structure, so warn user.
        If j <> 5 Then
            MsgBox "Malformed input line."
            Exit Sub
        End If

        ' Finally assing input line fields, and do origin point adjustment at
        ' the same time.
        xc = sArr3(1) + x0
        yc = sArr3(2) + y0
        zc = sArr3(3) + z0
        ec = sArr3(4)

        ix = Int(xc / dx)
        iy = Int(yc / dy)
        iz = Int(zc / dz)
        pointCounts(ix, iy, iz) = pointCounts(ix, iy, iz) + 1
        epsilonSums(ix, iy, iz) = epsilonSums(ix, iy, iz) + ec

        If ec < minimumEpsilon Then
            minimumEpsilon = ec
        End If

        If ec > maximumEpsilon Then
            maximumEpsilon = ec
        End If
    Wend
    Close #1

    Dim cnt      As Integer
    Dim sum      As Double
    Dim eps      As Double
    Dim epsIdx   As Integer
    Dim depsilon As Double

    depsilon = (maximumEpsilon - minimumEpsilon) / Nepsilon

    ' Next, calculate the number of levels of epsilon quantization actually
    ' used by the structure.
    ReDim epsilons(Nepsilon) As Double

    For ix = 0 To Nx-1
    For iy = 0 To Ny-1
    For iz = 0 To Nz-1
        cnt = pointCounts(ix, iy, iz)
        sum = epsilonSums(ix, iy, iz)

        If cnt <> 0 Then
             eps = sum / cnt
             epsIdx = Int((eps - minimumEpsilon) / _
                          (maximumEpsilon - minimumEpsilon) * Nepsilon)
             epsilons(epsIdx) = epsilons(epsIdx) + 1
        End If
    Next
    Next
    Next

    ' Then create all materials which were actially used. We need this
    ' preparation step because no solid can reference the material not yet
    ' created.
    ' NOTE: Material creation looks like garbage, but the order matters!
    For i = LBound(epsilons) To UBound(epsilons)
    If epsilons(i) <> 0 Then
    With Material
        .Reset
        .Name                       "material_" & i
        .Folder                     "varepsilon"
        .FrqType                    "all"
        .Type                       "Normal"
        .SetMaterialUnit            "Hz", "m"
        .Epsilon                    minimumEpsilon + i*depsilon
        .Mue                        "1"
        .ThinPanel                  "False"
        .Thickness                  "0"
        .Kappa                      "0"
        .TanD                       "0.0"
        .TanDFreq                   "0.0"
        .TanDGiven                  "False"
        .TanDModel                  "ConstTanD"
        .ConstTanDModelOrderEps     "1"
        .ReferenceCoordSystem       "Global"
        .CoordSystemType            "Cartesian"
        .KappaM                     "0"
        .TanDM                      "0.0"
        .TanDMFreq                  "0.0"
        .TanDMGiven                 "False"
        .TanDMModel                 "ConstTanD"
        .ConstTanDModelOrderMue     "1"
        .DispModelEps               "None"
        .DispModelMue               "None"
        .DispersiveFittingSchemeEps "1st Order"
        .DispersiveFittingSchemeMue "1st Order"
        .UseGeneralDispersionEps    "False"
        .UseGeneralDispersionMue    "False"
        .NLAnisotropy               "False"
        .NLAStackingFactor          "1"
        .NLADirectionX              "1"
        .NLADirectionY              "0"
        .NLADirectionZ              "0"
        .Rho                        "0"
        .ThermalType                "Normal"
        .ThermalConductivity        "0"
        .HeatCapacity               "0"
        .MetabolicRate              "0"
        .BloodFlow                  "0"
        .VoxelConvection            "0"
        .MechanicsType              "Unused"
        .Colour                     "0", "1", "1"
        .Wireframe                  "False"
        .Reflection                 "False"
        .Allowoutline               "True"
        .Transparentoutline         "False"
        .Transparency               "0"
        .Create
    End With
    End If
    Next

    ' After all materials are specified, create all cells as cuboid solids.
    For ix = 0 To Nx-1
    For iy = 0 To Ny-1
    For iz = 0 To Nz-1
        cnt = pointCounts(ix, iy, iz)
        sum = epsilonSums(ix, iy, iz)

        If cnt <> 0 Then
            eps = sum / cnt
            epsIdx = Int((eps - minimumEpsilon) / _
                         (maximumEpsilon - minimumEpsilon) * Nepsilon)

            With Brick
                .Reset
                .Name "solid_" & ix & "_" & iy & "_" & iz
                .Component "varepsilon"
                .Material "varepsilon/material_" & epsIdx
                .Xrange ix*dx, (ix+1)*dx
                .Yrange iy*dy, (iy+1)*dy
                .Zrange iz*dz, (iz+1)*dz
                .Create
            End With

            ' This simply takes a copy of 'varepsilon:cutoff' solid and names
            ' it 'varepsilon:cutoff_1'. Stupid CST.
            With Transform
                .Reset
                .Name               "varepsilon:cutoff"
                .Vector             0, 0, 0
                .UsePickedPoints    False
                .InvertPickedPoints False
                .MultipleObjects    True
                .GroupObjects       False
                .Repetitions        1
                .MultipleSelection  False
                .Destination        ""
                .Material           ""
                .Transform          "Shape", "Translate"
            End With

            With Solid
                .Version 9
                .Intersect "varepsilon:solid_" & ix & "_" & iy & "_" & iz, _
                           "varepsilon:cutoff_1"
                .Version 1
            End With
        End If
    Next
    Next
    Next

ExitLabel:
    ' Nothing to do.
End Sub
